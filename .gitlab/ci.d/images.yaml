.docker_build:
  stage: .pre
  cache:
    - key: kaniko_cache
      policy: pull-push
      paths:
        - .kaniko_cache
  image:
    name: gcr.io/kaniko-project/executor:v1.19.2-debug
    entrypoint: [""]
  script:
    - |
      cat > /kaniko/.docker/config.json << EOF
      {
        "auths": {
          "${CI_REGISTRY}": {
            "auth": "$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')"
          }
        }
      }
      EOF
    - /kaniko/executor
      --context "dir://${CI_PROJECT_DIR}/test/ci/${IMAGE_NAME}/"
      --dockerfile "Dockerfile"
      --destination "registry.gitlab.com/akantu/akantu/${IMAGE_NAME}"
      --cache=true
      --cache-dir=${CI_PROJECT_DIR}/.kaniko_cache
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        compare_to: 'master'
        paths:
          - test/ci/${IMAGE_NAME}/*
      when: manual
      allow_failure: true

# ------------------------------------------------------------------------------
.cache_build:
  variables:
    CCACHE_BASEDIR: ${CI_PROJECT_DIR}/
    CCACHE_DIR: ${CI_PROJECT_DIR}/.ccache
    CCACHE_MAXSIZE: 1Gi
    CCACHE_SLOPINESS: file_macro
  before_script:
    - ccache --zero-stats || true
  after_script:
    - ccache --show-stats || true

# ------------------------------------------------------------------------------
.image_debian_bullseye:
  image: registry.gitlab.com/akantu/akantu/debian:bullseye

.image_ubuntu_lts:
  image: registry.gitlab.com/akantu/akantu/ubuntu:lts

.image_manylinux:
  variables:
    IMAGE_NAME: 'manylinux:2014_x86_64'
  image: registry.gitlab.com/akantu/akantu/manylinux:2014_x86_64

# ------------------------------------------------------------------------------
.compiler_gcc:
  variables:
    CC: /usr/lib/ccache/gcc
    CXX: /usr/lib/ccache/g++
    FC: gfortran
    GCOV_EXECUTABLE: gcov

.compiler_gcc_ubuntu:
  variables:
    CC: /usr/lib/ccache/gcc-8
    CXX: /usr/lib/ccache/g++-8
    FC: /usr/bin/gfortran-8
    GCOV_EXECUTABLE: gcov

.compiler_clang:
  variables:
    CC: /usr/lib/ccache/clang
    CXX: /usr/lib/ccache/clang++
    FC: gfortran
    GCOV_EXECUTABLE: llvm-cov gcov

.build_coverage:
  variables:
    TEST_EXAMPLES: "FALSE"
    BUILD_TYPE: "Coverage"

.build_release:
  variables:
    TEST_EXAMPLES: "TRUE"
    BUILD_TYPE: "Release"

.build_valgrind:
  variables:
    TEST_EXAMPLES: "FALSE"
    BUILD_TYPE: "Valgrind"

# ------------------------------------------------------------------------------
.debian_bullseye_gcc:
  variables:
    output: debian_bullseye_gcc
  extends:
    - .compiler_gcc
    - .image_debian_bullseye
    - .cache_build

.debian_bullseye_clang:
  variables:
    output: debian_bullseye_clang
  extends:
    - .compiler_clang
    - .image_debian_bullseye
    - .cache_build

.ubuntu_lts_gcc:
  variables:
    output: ubuntu_lts_gcc
  extends:
    - .compiler_gcc_ubuntu
    - .image_ubuntu_lts
    - .cache_build

.manylinux_2014_x86_64_gcc:
  variables:
    output: manylinux_2014_x86_64_gcc
  extends:
    - .compiler_gcc
    - .image_manylinux
    - .cache_build

.macos_clang:
  variables:
    IMAGE_NAME: 'macosx'
    PLAT_SUFFIX: '_macos'
    output: macox_clang
    CC: /usr/bin/clang
    CXX: /usr/bin/clang++
  tags:
    - macos
